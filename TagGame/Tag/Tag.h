/**
 * @file Header.h
 * @brief Объявление классов Game  для консольной игры "Пятнашки".
 *
 * Файл содержит описание структуры игры:
 * - Класс Game управляет логикой и состоянием игрового поля 4×4.
 * - Класс UI отвечает за взаимодействие с пользователем через консоль.
 */

#pragma once
#include <iostream>
#include <ctime>
using namespace std;
/**
 * @class Game
 * @brief Класс, реализующий игровую логику "Пятнашек".
 *
 * Класс управляет игровым полем, перемещением фишек, проверкой правильности
 * расположения и случайным перемешиванием.
 */
class Game
{
private:
    int empty_col, empty_row;
    int field[4][4];
public:
    /**
     * @brief Конструктор. Инициализирует и перемешивает игровое поле.
     */
    Game();
    /**
     * @brief Деструктор (пустой, т.к. динамическая память не используется).
     */
    ~Game() {}

    /**
     * @brief Получить индекс строки, где находится пустая клетка.
     * @return Индекс строки (0–3).
     */
    int GetEmptyRow() const;
    /**
     * @brief Получить индекс столбца, где находится пустая клетка.
     * @return Индекс столбца (0–3).
     */
    int GetEmptyCol() const;
    /**
     * @brief Заполнить поле числами от 1 до 15 и одной пустой клеткой.
     */
    void fill();

    /**
     * @brief Перемешать поле случайным образом до разрешимого состояния.
     */
    void change();
    /**
     * @brief Совершить ход в указанном направлении.
     *
     * @param direction Символ направления ('W', 'A', 'S', 'D' или их строчные аналоги).
     * @return true, если ход был выполнен; false, если ход невозможен.
     */
    bool move(char direction);
    /**
    * @brief Проверить, собрано ли поле в правильном порядке.
    * @return true, если все числа стоят по порядку, иначе false.
    */
    bool isRight() const;
    /**
     * @brief Проверить, является ли текущее расположение решаемым.
     *
     * @param arr Массив из 16 элементов (игровое поле).
     * @return true, если комбинация решаема.
     */
    bool isSolvable(int arr[]);
    /**
    * @brief Доступ к строке игрового поля по индексу.
    *
    * @param row Номер строки (0–3).
    * @return Указатель на массив из 4 элементов (строка поля).
    */
    int* operator[](int row);
    /**
     * @brief Вывод игрового поля в поток.
     *
     * @param os Поток вывода.
     * @param g Объект игры.
     * @return Ссылка на поток вывода.
     */

    friend ostream& operator<<(ostream& os, const Game& g);
};
